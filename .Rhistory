#summaryPeaks(peaks[1:10])  # resumen estadistico de picos (primeros 10)
# Conteo de picos por perfil
cP <- countPeaks(peaks)
# Gráfico de picos
plot(cP, type = "n")
text(cP, label = 1:length(cP))
# Patrones de picos
peakPatterns(peaks)
# Filtrado de picos de baja frecuencia de aparición
picos_filtrados <- filterPeaks(peaks,
minFreq = 0.25,
labels = df_metadata_prom_rep$factor_num ) #labels
# Patrones de picos
peakPatterns(picos_filtrados)
# Conteo de picos por perfil
cP2 <- countPeaks(picos_filtrados)
# Gráfico
plot(cP2, type = "n")
text(cP2, label = 1:length(cP2))
# Fusión de picos de la misma muestra
picos_fusion_muestra <- mergeMassPeaks(picos_filtrados,
labels = df_metadata_prom_rep$factor_num,
method = "median")
# Patrones de picos
peakPatterns(picos_fusion_muestra)
### CREACIÓN DE MATRIZ DE INTENSIDADES Y DICOTÓMICA ############################
################################################################################
# Matriz de intensidades 19 individuos
matint_19_ind <- intensityMatrix(picos_fusion_muestra,
Spectra_list_prom_muestra) # sin valores NA
# Matriz de intensidades de 80 muestras
# matint_na_51 <- intensityMatrix(picos_fusion_muestra) # con valores NA
matint_80_mue <- intensityMatrix(picos_filtrados,
Spectra_list_prom_rep) # sin valores NA
# Definición de umbrales
thr1 <- optimizeThreshold(matint_19_ind,
df_metadata_prom_mue$estado,
verbose = T)
thr2 <- optimizeThreshold(matint_80_mue,
df_metadata_prom_rep$estado,
verbose = T)
# Dicotomización
matint_19_ind_dico <- dichotomize(matint_19_ind, thr1)
matint_80_mue_dico <- dichotomize(matint_80_mue, thr2)
# Agrego nombres a las filas de cada df
rownames(matint_19_ind_dico) <- df_metadata_prom_mue$factor_num
rownames(matint_80_mue_dico) <- df_metadata_prom_rep$factor_mue
rownames(matint_19_ind) <- df_metadata_prom_mue$factor_num
rownames(matint_80_mue) <- df_metadata_prom_rep$factor_mue
### GUARDAR DATOS ##############################################################
################################################################################
# Establecer el directorio de trabajo en la ubicación del script
setwd(dirname(rstudioapi::getActiveDocumentContext()$path)) # Se puede mejorar, subcarpeta
# Guardar matrices y metadata asociada como archivo .Rdata
save(matint_19_ind_dico,df_metadata_prom_mue, file = "matint_19_ind_dico.Rdata")
save(matint_80_mue_dico, df_metadata_prom_rep, file = "matint_80_mue_dico.Rdata")
save(matint_19_ind,df_metadata_prom_mue, file = "matint_19_ind.Rdata")
save(matint_80_mue, df_metadata_prom_rep, file = "matint_80_mue.Rdata")
# Guardar matrices y metadata asociada como archivo .csv
write.csv(matint_19_ind_dico, "matint_19_ind_dico.csv", row.names = TRUE)
write.csv(matint_19_ind, "matint_19_ind.csv", row.names = TRUE)
write.csv(matint_80_mue_dico, "matint_80_mue_dico.csv", row.names = TRUE)
write.csv(matint_80_mue, "matint_80_mue.csv", row.names = TRUE)
write.csv(df_metadata_prom_mue, "df_19.csv", row.names = TRUE)
write.csv(df_metadata_prom_rep, "df_80.csv", row.names = TRUE)
#
#
#
### FIN ########################################################################
################################################################################
##### ANEXO: GRAFICO DE PICOS PREPONDERANTES ###################################
# Cargar librería necesaria
library(scales)  # Para agregar transparencia a los colores
# Definir los puntos de referencia y tolerancia
highlight_positions <- c(2152, 3466, 5443, 8491, 6283)
tolerance <- 20
# Definir los límites del eje x
x_lim <- c(2000, 10000)
# Definir los colores con transparencia (50% de opacidad)
colors <- c(alpha("blue", 0.3), alpha("blue", 0.3), alpha("red", 0.3), alpha("red", 0.3), alpha("red", 0.3))
# Ajustar la cantidad de espectros por gráfico
spectra_per_plot <- 3
total_spectra <- length(Spectra_list_prom_muestra)
# Calcular el número de gráficos necesarios
num_plots <- ceiling(total_spectra / spectra_per_plot)
# Loop para generar los gráficos
for (plot_idx in 1:num_plots) {
# Definir los índices de los espectros que van en este gráfico
start_idx <- (plot_idx - 1) * spectra_per_plot + 1
end_idx <- min(plot_idx * spectra_per_plot, total_spectra)
# Configurar un layout de 3 filas y 1 columna (3 subplots por gráfico)
par(mfrow=c(spectra_per_plot, 1), mar=c(4, 4, 2, 2))  # Márgenes ajustados
# Graficar cada espectro en el rango de este gráfico
for (i in start_idx:end_idx) {
mass <- Spectra_list_prom_muestra[[i]]@mass
intensity <- Spectra_list_prom_muestra[[i]]@intensity
# Graficar el espectro individual
plot(mass, intensity, type = "l", col = "black",
xlab = "Mass/Charge (m/z)", ylab = "Intensity",
main = paste("Espectro del individuo", i, "con regiones de interés"),
xlim = x_lim)
# Dibujar las barras semitransparentes con tolerancia
for (j in 1:length(highlight_positions)) {
rect(highlight_positions[j] - tolerance, par("usr")[3],
highlight_positions[j] + tolerance, par("usr")[4],
col = colors[j], border = NA)
}
# Dibujar el espectro encima para que la barra quede de fondo
lines(mass, intensity, col = "black")
}
}
################ MALDI-TOF ANALISIS VINCHUCA ###################################
################ 3) PREPROCESAMIENTO de datos prueba ###########################
# Autor: Bioing. Facundo Urteaga (IBB-CONICET)
#
#
### CARGA DE LIBRERIAS #########################################################
################################################################################
library(binda)
library(here)
library(dplyr)
library(readBrukerFlexData)
library(MALDIquant)
library(MALDIquantForeign)
library(MALDIrppa)
library(stringr)
### CARGA DE ESPECTROS #########################################################
################################################################################
# Creación de la ruta relativa de los archivos
#ruta_proyecto <- "C:/Users/urtea/OneDrive/Documents/Proyectos/MALDI_Vinchucas/Datos"
ruta_proyecto <- "C:/Users/Facundo/Documents/Proyectos/MALDI_Vinchucas/Datos_prueba"
ruta_datos <- file.path(ruta_proyecto)
# Importar espectros
Spectra_list <- importBrukerFlex(file.path(ruta_datos), verbose=FALSE)
View(Spectra_list)
Spectra_list[[1]]@name
for(i in 1:length(Spectra_list)) {
Spectra_list[[i]]@metaData$file
}
for(i in 1:length(Spectra_list)) {
print(Spectra_list[[i]]@metaData$file)
}
################ MALDI-TOF ANALISIS VINCHUCA ###################################
################ 3) PREPROCESAMIENTO de datos prueba ###########################
# Autor: Bioing. Facundo Urteaga (IBB-CONICET)
#
#
### CARGA DE LIBRERIAS #########################################################
################################################################################
library(binda)
library(here)
library(dplyr)
library(readBrukerFlexData)
library(MALDIquant)
library(MALDIquantForeign)
library(MALDIrppa)
library(stringr)
### CARGA DE ESPECTROS #########################################################
################################################################################
# Creación de la ruta relativa de los archivos
#ruta_proyecto <- "C:/Users/urtea/OneDrive/Documents/Proyectos/MALDI_Vinchucas/Datos"
ruta_proyecto <- "C:/Users/Facundo/Documents/Proyectos/MALDI_Vinchucas/Datos_prueba"
ruta_datos <- file.path(ruta_proyecto)
# Importar espectros
Spectra_list <- importBrukerFlex(file.path(ruta_datos), verbose=FALSE)
# for(i in 1:length(Spectra_list)) {
#   print(Spectra_list[[i]]@metaData$file)
# }
### OBTENCIÓN DE METADATA DE ESPECTROS #########################################
################################################################################
# Creación de columnas vacías
col_num <- c()
col_estado <- c()
col_numero <- c()
col_sexo <- c()
col_rep_m <- c()
col_rep_t <- c()
# # Patrones auxiliares para buscar el día de la muestra
patron_h <- "embra"
patron_m <- "Macho"
# Ciclo que extrae dia, tipo, numero, well y réplica de cada muestra
for(i in 1:length(Spectra_list)) {
nombre <- Spectra_list[[i]]@metaData$file
# Encuentra la posición del patrón infectadas
posicion_h <- str_locate(nombre, patron_h)[1, 2]
# Encuentra la posición del patrón infectadas
posicion_m <- str_locate(nombre, patron_m)[1, 2]
# Verifica si posicion_ni es NA
if (is.na(posicion_h)) {
posicion <- posicion_h
sexo <- "Hembra"
# Extrae la parte restante del nombre después del estado
resultado <- substr(nombre, (posicion+2), nchar(nombre))
# Usa expresiones regulares para extraer los datos:
# Ejemplo: "Vinchuca 1 hembra 23-05-24\\0_A1\\1\\1SLin\\fid"
numero_vinchuca <- str_extract(resultado, "embra [0-9]+") %>% str_extract("[0-9]+")
estado <- "infectado"
replica_muestra <- str_extract(resultado, "[A-Z][0-9]+")
replica_tecnica <- str_extract(resultado, "\\\\[0-9]+\\\\1SLin") %>% str_extract("[0-9]+")
}
else {
posicion <- posicion_m
sexo <- "Macho"
# Extrae la parte restante del nombre después del estado
resultado <- substr(nombre, (posicion+2), nchar(nombre))
# Usa expresiones regulares para extraer los datos:
# Ejemplo: "Vinchuca 1 hembra 23-05-24\\0_A1\\1\\1SLin\\fid"
numero_vinchuca <- str_extract(resultado, "Macho [0-9]+") %>% str_extract("[0-9]+")
estado <- "infectado"
replica_muestra <- str_extract(resultado, "[A-Z][0-9]+")
replica_tecnica <- str_extract(resultado, "\\\\[0-9]+\\\\1SLin") %>% str_extract("[0-9]+")
}
# Almacena los valores extraídos en sus respectivas columnas
col_estado <- c(col_estado, estado)
col_numero <- c(col_numero, numero_vinchuca)
col_sexo <- c(col_sexo, sexo)
col_rep_m <- c(col_rep_m, replica_muestra)
col_rep_t <- c(col_rep_t, replica_tecnica)
# print(paste("Estado:", estado, "| Número:", numero_vinchuca, "| Sexo:", sexo,
#             "| Réplica Muestra:", replica_muestra, "| Réplica Técnica:", replica_tecnica))
Spectra_list[[i]]@metaData$numero_vinchuca <- numero_vinchuca
Spectra_list[[i]]@metaData$estado <- estado
Spectra_list[[i]]@metaData$sexo <- sexo
Spectra_list[[i]]@metaData$rep_m <- replica_muestra
Spectra_list[[i]]@metaData$rep_t <- replica_tecnica
# Data Frame con los datos limpios
df_metadata <- data.frame(estado = col_estado, numero = col_numero, sexo = col_sexo,
rep_m = col_rep_m, rep_t = col_rep_t)
# Creación de factores de agrupamiento para su uso posterior
df_metadata$factor_num <- paste0(df_metadata$estado, "_", df_metadata$numero)
df_metadata$factor_mue <- paste0(df_metadata$estado, "_", df_metadata$rep_m)
df_metadata$factor_sex <- paste0(df_metadata$estado, "_", df_metadata$sexo)
}
View(df_metadata)
View(df_metadata)
################ MALDI-TOF ANALISIS VINCHUCA ###################################
################ 3) PREPROCESAMIENTO de datos prueba ###########################
# Autor: Bioing. Facundo Urteaga (IBB-CONICET)
#
#
### CARGA DE LIBRERIAS #########################################################
################################################################################
library(binda)
library(here)
library(dplyr)
library(readBrukerFlexData)
library(MALDIquant)
library(MALDIquantForeign)
library(MALDIrppa)
library(stringr)
### CARGA DE ESPECTROS #########################################################
################################################################################
# Creación de la ruta relativa de los archivos
#ruta_proyecto <- "C:/Users/urtea/OneDrive/Documents/Proyectos/MALDI_Vinchucas/Datos"
ruta_proyecto <- "C:/Users/Facundo/Documents/Proyectos/MALDI_Vinchucas/Datos_prueba"
ruta_datos <- file.path(ruta_proyecto)
# Importar espectros
Spectra_list <- importBrukerFlex(file.path(ruta_datos), verbose=FALSE)
# for(i in 1:length(Spectra_list)) {
#   print(Spectra_list[[i]]@metaData$file)
# }
### OBTENCIÓN DE METADATA DE ESPECTROS #########################################
################################################################################
# Creación de columnas vacías
col_num <- c()
col_estado <- c()
col_numero <- c()
col_sexo <- c()
col_rep_m <- c()
col_rep_t <- c()
# # Patrones auxiliares para buscar el día de la muestra
patron_h <- "embra"
patron_m <- "Macho"
# Ciclo que extrae dia, tipo, numero, well y réplica de cada muestra
#for(i in 1:length(Spectra_list)) {
for(i in 1:2) {
nombre <- Spectra_list[[i]]@metaData$file
# Encuentra la posición del patrón infectadas
posicion_h <- str_locate(nombre, patron_h)[1, 2]
# Encuentra la posición del patrón infectadas
posicion_m <- str_locate(nombre, patron_m)[1, 2]
# Verifica si posicion_ni es NA
if (is.na(posicion_h)) {
posicion <- posicion_h
sexo <- "Hembra"
# Extrae la parte restante del nombre después del estado
resultado <- substr(nombre, (posicion+2), nchar(nombre))
# Usa expresiones regulares para extraer los datos:
# Ejemplo: "Vinchuca 1 hembra 23-05-24\\0_A1\\1\\1SLin\\fid"
numero_vinchuca <- str_extract(resultado, "embra [0-9]+") %>% str_extract("[0-9]+")
estado <- "infectado"
replica_muestra <- str_extract(resultado, "[A-Z][0-9]+")
replica_tecnica <- str_extract(resultado, "\\\\[0-9]+\\\\1SLin") %>% str_extract("[0-9]+")
}
else {
posicion <- posicion_m
sexo <- "Macho"
# Extrae la parte restante del nombre después del estado
resultado <- substr(nombre, (posicion+2), nchar(nombre))
# Usa expresiones regulares para extraer los datos:
# Ejemplo: "Vinchuca 1 hembra 23-05-24\\0_A1\\1\\1SLin\\fid"
numero_vinchuca <- str_extract(resultado, "Macho [0-9]+") %>% str_extract("[0-9]+")
estado <- "infectado"
replica_muestra <- str_extract(resultado, "[A-Z][0-9]+")
replica_tecnica <- str_extract(resultado, "\\\\[0-9]+\\\\1SLin") %>% str_extract("[0-9]+")
}
# Almacena los valores extraídos en sus respectivas columnas
col_estado <- c(col_estado, estado)
col_numero <- c(col_numero, numero_vinchuca)
col_sexo <- c(col_sexo, sexo)
col_rep_m <- c(col_rep_m, replica_muestra)
col_rep_t <- c(col_rep_t, replica_tecnica)
# print(paste("Estado:", estado, "| Número:", numero_vinchuca, "| Sexo:", sexo,
#             "| Réplica Muestra:", replica_muestra, "| Réplica Técnica:", replica_tecnica))
Spectra_list[[i]]@metaData$numero_vinchuca <- numero_vinchuca
Spectra_list[[i]]@metaData$estado <- estado
Spectra_list[[i]]@metaData$sexo <- sexo
Spectra_list[[i]]@metaData$rep_m <- replica_muestra
Spectra_list[[i]]@metaData$rep_t <- replica_tecnica
# Data Frame con los datos limpios
df_metadata <- data.frame(estado = col_estado, numero = col_numero, sexo = col_sexo,
rep_m = col_rep_m, rep_t = col_rep_t)
# Creación de factores de agrupamiento para su uso posterior
df_metadata$factor_num <- paste0(df_metadata$estado, "_", df_metadata$numero)
df_metadata$factor_mue <- paste0(df_metadata$estado, "_", df_metadata$rep_m)
df_metadata$factor_sex <- paste0(df_metadata$estado, "_", df_metadata$sexo)
}
################ MALDI-TOF ANALISIS VINCHUCA ###################################
################ 3) PREPROCESAMIENTO de datos prueba ###########################
# Autor: Bioing. Facundo Urteaga (IBB-CONICET)
#
#
### CARGA DE LIBRERIAS #########################################################
################################################################################
library(binda)
library(here)
library(dplyr)
library(readBrukerFlexData)
library(MALDIquant)
library(MALDIquantForeign)
library(MALDIrppa)
library(stringr)
### CARGA DE ESPECTROS #########################################################
################################################################################
# Creación de la ruta relativa de los archivos
#ruta_proyecto <- "C:/Users/urtea/OneDrive/Documents/Proyectos/MALDI_Vinchucas/Datos"
ruta_proyecto <- "C:/Users/Facundo/Documents/Proyectos/MALDI_Vinchucas/Datos_prueba"
ruta_datos <- file.path(ruta_proyecto)
# Importar espectros
Spectra_list <- importBrukerFlex(file.path(ruta_datos), verbose=FALSE)
# for(i in 1:length(Spectra_list)) {
#   print(Spectra_list[[i]]@metaData$file)
# }
### OBTENCIÓN DE METADATA DE ESPECTROS #########################################
################################################################################
# Creación de columnas vacías
col_num <- c()
col_estado <- c()
col_numero <- c()
col_sexo <- c()
col_rep_m <- c()
col_rep_t <- c()
# # Patrones auxiliares para buscar el día de la muestra
patron_h <- "embra"
patron_m <- "Macho"
# Ciclo que extrae dia, tipo, numero, well y réplica de cada muestra
#for(i in 1:length(Spectra_list)) {
for(i in 1:2) {
nombre <- Spectra_list[[i]]@metaData$file
# Encuentra la posición del patrón infectadas
posicion_h <- str_locate(nombre, patron_h)[1, 2]
# Encuentra la posición del patrón infectadas
posicion_m <- str_locate(nombre, patron_m)[1, 2]
# Verifica si posicion_ni es NA
if (is.na(posicion_h)) {
sexo <- "Hembra"
# Extrae la parte restante del nombre después del estado
resultado <- substr(nombre, (posicion_h+2), nchar(nombre))
# Usa expresiones regulares para extraer los datos:
# Ejemplo: "Vinchuca 1 hembra 23-05-24\\0_A1\\1\\1SLin\\fid"
numero_vinchuca <- str_extract(resultado, "embra [0-9]+") %>% str_extract("[0-9]+")
estado <- "infectado"
replica_muestra <- str_extract(resultado, "[A-Z][0-9]+")
replica_tecnica <- str_extract(resultado, "\\\\[0-9]+\\\\1SLin") %>% str_extract("[0-9]+")
}
else {
posicion <- posicion_m
sexo <- "Macho"
# Extrae la parte restante del nombre después del estado
resultado <- substr(nombre, (posicion+2), nchar(nombre))
# Usa expresiones regulares para extraer los datos:
# Ejemplo: "Vinchuca 1 hembra 23-05-24\\0_A1\\1\\1SLin\\fid"
numero_vinchuca <- str_extract(resultado, "Macho [0-9]+") %>% str_extract("[0-9]+")
estado <- "infectado"
replica_muestra <- str_extract(resultado, "[A-Z][0-9]+")
replica_tecnica <- str_extract(resultado, "\\\\[0-9]+\\\\1SLin") %>% str_extract("[0-9]+")
}
# Almacena los valores extraídos en sus respectivas columnas
col_estado <- c(col_estado, estado)
col_numero <- c(col_numero, numero_vinchuca)
col_sexo <- c(col_sexo, sexo)
col_rep_m <- c(col_rep_m, replica_muestra)
col_rep_t <- c(col_rep_t, replica_tecnica)
# print(paste("Estado:", estado, "| Número:", numero_vinchuca, "| Sexo:", sexo,
#             "| Réplica Muestra:", replica_muestra, "| Réplica Técnica:", replica_tecnica))
Spectra_list[[i]]@metaData$numero_vinchuca <- numero_vinchuca
Spectra_list[[i]]@metaData$estado <- estado
Spectra_list[[i]]@metaData$sexo <- sexo
Spectra_list[[i]]@metaData$rep_m <- replica_muestra
Spectra_list[[i]]@metaData$rep_t <- replica_tecnica
# Data Frame con los datos limpios
df_metadata <- data.frame(estado = col_estado, numero = col_numero, sexo = col_sexo,
rep_m = col_rep_m, rep_t = col_rep_t)
# Creación de factores de agrupamiento para su uso posterior
df_metadata$factor_num <- paste0(df_metadata$estado, "_", df_metadata$numero)
df_metadata$factor_mue <- paste0(df_metadata$estado, "_", df_metadata$rep_m)
df_metadata$factor_sex <- paste0(df_metadata$estado, "_", df_metadata$sexo)
}
################ MALDI-TOF ANALISIS VINCHUCA ###################################
################ 3) PREPROCESAMIENTO de datos prueba ###########################
# Autor: Bioing. Facundo Urteaga (IBB-CONICET)
#
#
### CARGA DE LIBRERIAS #########################################################
################################################################################
library(binda)
library(here)
library(dplyr)
library(readBrukerFlexData)
library(MALDIquant)
library(MALDIquantForeign)
library(MALDIrppa)
library(stringr)
### CARGA DE ESPECTROS #########################################################
################################################################################
# Creación de la ruta relativa de los archivos
#ruta_proyecto <- "C:/Users/urtea/OneDrive/Documents/Proyectos/MALDI_Vinchucas/Datos"
ruta_proyecto <- "C:/Users/Facundo/Documents/Proyectos/MALDI_Vinchucas/Datos_prueba"
ruta_datos <- file.path(ruta_proyecto)
# Importar espectros
Spectra_list <- importBrukerFlex(file.path(ruta_datos), verbose=FALSE)
# for(i in 1:length(Spectra_list)) {
#   print(Spectra_list[[i]]@metaData$file)
# }
### OBTENCIÓN DE METADATA DE ESPECTROS #########################################
################################################################################
# Creación de columnas vacías
col_num <- c()
col_estado <- c()
col_numero <- c()
col_sexo <- c()
col_rep_m <- c()
col_rep_t <- c()
# # Patrones auxiliares para buscar el día de la muestra
patron_h <- "embra"
patron_m <- "Macho"
# Ciclo que extrae dia, tipo, numero, well y réplica de cada muestra
for(i in 1:length(Spectra_list)) {
nombre <- Spectra_list[[i]]@metaData$file
# Encuentra la posición del patrón infectadas
posicion_h <- str_locate(nombre, patron_h)[1, 2]
# Encuentra la posición del patrón infectadas
posicion_m <- str_locate(nombre, patron_m)[1, 2]
# Verifica si posicion_ni es NA
if (is.na(posicion_m)) {
sexo <- "Hembra"
# Extrae la parte restante del nombre después del estado
resultado <- substr(nombre, (posicion_h+2), nchar(nombre))
# Usa expresiones regulares para extraer los datos:
# Ejemplo: "Vinchuca 1 hembra 23-05-24\\0_A1\\1\\1SLin\\fid"
numero_vinchuca <- str_extract(resultado, "embra [0-9]+") %>% str_extract("[0-9]+")
estado <- "infectado"
replica_muestra <- str_extract(resultado, "[A-Z][0-9]+")
replica_tecnica <- str_extract(resultado, "\\\\[0-9]+\\\\1SLin") %>% str_extract("[0-9]+")
}
else {
posicion <- posicion_m
sexo <- "Macho"
# Extrae la parte restante del nombre después del estado
resultado <- substr(nombre, (posicion_m+2), nchar(nombre))
# Usa expresiones regulares para extraer los datos:
# Ejemplo: "Vinchuca 1 hembra 23-05-24\\0_A1\\1\\1SLin\\fid"
numero_vinchuca <- str_extract(resultado, "Macho [0-9]+") %>% str_extract("[0-9]+")
estado <- "infectado"
replica_muestra <- str_extract(resultado, "[A-Z][0-9]+")
replica_tecnica <- str_extract(resultado, "\\\\[0-9]+\\\\1SLin") %>% str_extract("[0-9]+")
}
# Almacena los valores extraídos en sus respectivas columnas
col_estado <- c(col_estado, estado)
col_numero <- c(col_numero, numero_vinchuca)
col_sexo <- c(col_sexo, sexo)
col_rep_m <- c(col_rep_m, replica_muestra)
col_rep_t <- c(col_rep_t, replica_tecnica)
# print(paste("Estado:", estado, "| Número:", numero_vinchuca, "| Sexo:", sexo,
#             "| Réplica Muestra:", replica_muestra, "| Réplica Técnica:", replica_tecnica))
Spectra_list[[i]]@metaData$numero_vinchuca <- numero_vinchuca
Spectra_list[[i]]@metaData$estado <- estado
Spectra_list[[i]]@metaData$sexo <- sexo
Spectra_list[[i]]@metaData$rep_m <- replica_muestra
Spectra_list[[i]]@metaData$rep_t <- replica_tecnica
# Data Frame con los datos limpios
df_metadata <- data.frame(estado = col_estado, numero = col_numero, sexo = col_sexo,
rep_m = col_rep_m, rep_t = col_rep_t)
# Creación de factores de agrupamiento para su uso posterior
df_metadata$factor_num <- paste0(df_metadata$estado, "_", df_metadata$numero)
df_metadata$factor_mue <- paste0(df_metadata$estado, "_", df_metadata$rep_m)
df_metadata$factor_sex <- paste0(df_metadata$estado, "_", df_metadata$sexo)
}
View(df_metadata)
Spectra_list[[1]]@metaData$file
View(df_metadata)
Spectra_list[[13]]@metaData$file
